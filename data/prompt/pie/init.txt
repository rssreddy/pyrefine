# slower version:

a, b = input().split()
n = int(a + b)

flag = False
for i in range(n):
    if i ** 2 == n:
        flag = True
        break

print('Yes' if flag else 'No')


# optimized version of the same code:

a, b = input().split()
n = int(a + b)

flag = False
for i in range(1000):
    if i ** 2 == n:
        flag = True
        break

print('Yes' if flag else 'No')

### END ###

# slower version:

# ABC148D - Brick Break
def main():
    N, *A = map(int, open(0).read().split())
    remaining = 0
    cur = 0  # current index
    for target in range(1, N + 1):
        be_kept = False
        for i in range(cur, N):
            if A[i] == target:
                remaining += 1
                cur = i + 1
                be_kept = True
                break
        if not be_kept:
            break
    print(N - remaining if remaining else -1)


if __name__ == '__main__':
    main()


# optimized version of the same code:

# ABC148D - Brick Break
def main():
    N, *A = map(int, open(0).read().split())
    remaining = 0
    target = 1
    for i in A:
        if i == target:
            remaining += 1
            target += 1
    print(N - remaining if remaining else -1)


if __name__ == '__main__':
    main()

### END ###

# slower version:

# 077 B
import numpy as np

N = int(input())
n=int(np.sqrt(N))
print(n**2)


# optimized version of the same code:

N = int(input())
n = int(N**0.5) 
print(n**2)

### END ###

# slower version:

import numpy as np

N, K = map(int, input().split())
H = np.array(list(map(int, input().split())) + [0] * K, dtype=np.int64)

table = np.full(N + K, 10 ** 10, dtype=np.int64)
table[0] = 0

for i in range(1, N):
    table[i:i + K] = np.minimum(table[i:i + K], np.abs(H[i:i + K] - H[i - 1]) + table[i - 1])

print(table[N - 1])


# optimized version of the same code:

N, K = map(int, input().split())
H = tuple(map(int, input().split()))

table = [0] * N
for i in range(1, N):
    table[i] = min(abs(H[i] - H[j]) + table[j] for j in range(max(0, i - K), i))

print(table[N-1])

### END ###

# slower version:

n = int(input())
a = [int(i) for i in input().split()]
a.sort()

s = a[0]
for i in range(n):
  s = (s+a[i])/2
  
print(s)


# optimized version of the same code:

### 138-c
n = int(input())
v = [int(i) for i in input().split()]

v.sort()
ans = v[0]
for i in range(1,n):
    ans = (ans+v[i])/2
print(ans)

### END ###

# slower version:

# coding: utf-8
n_S, n_T = 0, 0

for c in input():
    if c == 'S':
        n_S += 1
    else:
        if n_S:
            n_S -= 1
        else:
            n_T += 1
print(n_S + n_T)


# optimized version of the same code:

X = input()
cnt_S, cnt_T = 0, 0

for c in X:
    if c == 'S':
        cnt_S += 1
    else:
        if cnt_S:
            cnt_S -= 1
        else:
            cnt_T += 1
print(cnt_S + cnt_T)

### END ###

# slower version:

# ABC125 C - GCD on Blackboard
from fractions import gcd
n = int(input())
a = list(map(int, input().split()))

l = n*[0]
r = n*[0]
ans = 0

for i in range(n-1):
    l[i+1] = gcd(l[i],a[i])

for i in range(n-1,0,-1):
    r[i-1] = gcd(r[i],a[i])

for i in range(n):
    ans = max(ans,gcd(l[i],r[i]))
print(ans)


# optimized version of the same code:

from math import gcd
n=int(input())
a=list(map(int,input().split()))

l=[0]*n
r=[0]*n

for i in range(n-1):
  l[i+1]=gcd(l[i],a[i])
for i in range(n-1,0,-1):
  r[i-1]=gcd(r[i],a[i])
ans=0
for i in range(n):
  ans=max(ans,gcd(l[i],r[i]))
print(ans)

### END ###

# slower version:

import numpy as np
A = np.arange(1<<27,dtype=np.int32)


a,b = map(int,input().split())
if (a-b) % 2 == 0:
  print((a+b)//2)
else:
  print('IMPOSSIBLE')


# optimized version of the same code:

import sys
read = sys.stdin.buffer.read
readline = sys.stdin.buffer.readline
readlines = sys.stdin.buffer.readlines

A,B = map(int,read().split())

q,r = divmod(A+B,2)

if r == 1:
    print('IMPOSSIBLE')
else:
    print(q)

### END ###

